# frozen_string_literal: true

module WhopSDK
  module Resources
    class AppBuilds
      # Some parameter documentations has been truncated, see
      # {WhopSDK::Models::AppBuildCreateParams} for more details.
      #
      # Creates a new app build
      #
      # Required permissions:
      #
      # - `developer:manage_builds`
      #
      # @overload create(attachment:, checksum:, platform:, app_id: nil, supported_app_view_types: nil, request_options: {})
      #
      # @param attachment [WhopSDK::Models::AppBuildCreateParams::Attachment] Input for an attachment
      #
      # @param checksum [String] Checksum of the app build file. This is generated by the client and used to veri
      #
      # @param platform [Symbol, WhopSDK::Models::AppBuildPlatforms] The platform of the app build (ios, android, web)
      #
      # @param app_id [String, nil] The ID of the app to create a build for. By default the current app from the api
      #
      # @param supported_app_view_types [Array<Symbol, WhopSDK::Models::AppViewType>, nil] Supported app view types for the app build. A build can specify multiple view ty
      #
      # @param request_options [WhopSDK::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [WhopSDK::Models::AppBuild]
      #
      # @see WhopSDK::Models::AppBuildCreateParams
      def create(params)
        parsed, options = WhopSDK::AppBuildCreateParams.dump_request(params)
        @client.request(
          method: :post,
          path: "app_builds",
          body: parsed,
          model: WhopSDK::AppBuild,
          options: options
        )
      end

      # Retrieves an app build by ID
      #
      # Required permissions:
      #
      # - `developer:manage_builds`
      #
      # @overload retrieve(id, request_options: {})
      #
      # @param id [String]
      # @param request_options [WhopSDK::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [WhopSDK::Models::AppBuild]
      #
      # @see WhopSDK::Models::AppBuildRetrieveParams
      def retrieve(id, params = {})
        @client.request(
          method: :get,
          path: ["app_builds/%1$s", id],
          model: WhopSDK::AppBuild,
          options: params[:request_options]
        )
      end

      # Lists app builds for an app
      #
      # Required permissions:
      #
      # - `developer:manage_builds`
      #
      # @overload list(app_id:, after: nil, before: nil, first: nil, last: nil, platform: nil, status: nil, request_options: {})
      #
      # @param app_id [String] The ID of the app to filter app builds by
      #
      # @param after [String, nil] Returns the elements in the list that come after the specified cursor.
      #
      # @param before [String, nil] Returns the elements in the list that come before the specified cursor.
      #
      # @param first [Integer, nil] Returns the first _n_ elements from the list.
      #
      # @param last [Integer, nil] Returns the last _n_ elements from the list.
      #
      # @param platform [Symbol, WhopSDK::Models::AppBuildPlatforms, nil] The different platforms an app build can target.
      #
      # @param status [Symbol, WhopSDK::Models::AppBuildStatuses, nil] The different statuses an AppBuild can be in.
      #
      # @param request_options [WhopSDK::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [WhopSDK::Internal::CursorPage<WhopSDK::Models::AppBuildListResponse>]
      #
      # @see WhopSDK::Models::AppBuildListParams
      def list(params)
        parsed, options = WhopSDK::AppBuildListParams.dump_request(params)
        @client.request(
          method: :get,
          path: "app_builds",
          query: parsed,
          page: WhopSDK::Internal::CursorPage,
          model: WhopSDK::Models::AppBuildListResponse,
          options: options
        )
      end

      # Promotes an app build to production
      #
      # Required permissions:
      #
      # - `developer:manage_builds`
      #
      # @overload promote(id, request_options: {})
      #
      # @param id [String]
      # @param request_options [WhopSDK::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [WhopSDK::Models::AppBuild]
      #
      # @see WhopSDK::Models::AppBuildPromoteParams
      def promote(id, params = {})
        @client.request(
          method: :post,
          path: ["app_builds/%1$s/promote", id],
          model: WhopSDK::AppBuild,
          options: params[:request_options]
        )
      end

      # @api private
      #
      # @param client [WhopSDK::Client]
      def initialize(client:)
        @client = client
      end
    end
  end
end
