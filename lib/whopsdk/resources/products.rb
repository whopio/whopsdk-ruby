# frozen_string_literal: true

module Whopsdk
  module Resources
    class Products
      # Some parameter documentations has been truncated, see
      # {Whopsdk::Models::ProductCreateParams} for more details.
      #
      # Creates a new Product
      #
      # Required permissions:
      #
      # - `access_pass:create`
      # - `access_pass:basic:read`
      #
      # @overload create(company_id:, title:, access_pass_type: nil, banner_image: nil, business_type: nil, collect_shipping_address: nil, custom_cta: nil, custom_cta_url: nil, custom_statement_descriptor: nil, description: nil, experience_ids: nil, global_affiliate_percentage: nil, global_affiliate_status: nil, headline: nil, industry_type: nil, member_affiliate_percentage: nil, member_affiliate_status: nil, plan_options: nil, product_highlights: nil, product_tax_code_id: nil, redirect_purchase_url: nil, route: nil, visibility: nil, request_options: {})
      #
      # @param company_id [String] The ID of the company to create the access pass for.
      #
      # @param title [String] The title of the access pass.
      #
      # @param access_pass_type [Symbol, Whopsdk::Models::AccessPassType, nil] The different types an access pass can be.
      #
      # @param banner_image [Whopsdk::Models::ProductCreateParams::BannerImage, nil] A banner image for the access pass in png, jpeg format
      #
      # @param business_type [Symbol, Whopsdk::Models::BusinessTypes, nil] The different business types a company can be.
      #
      # @param collect_shipping_address [Boolean, nil] Whether or not to collect shipping information at checkout from the customer.
      #
      # @param custom_cta [Symbol, Whopsdk::Models::CustomCta, nil] The different types of custom CTAs that can be selected.
      #
      # @param custom_cta_url [String, nil] The custom call to action URL for the access pass.
      #
      # @param custom_statement_descriptor [String, nil] The custom statement descriptor for the access pass i.e. WHOP\*SPORTS, must be
      # be
      #
      # @param description [String, nil] A written description of the access pass.
      #
      # @param experience_ids [Array<String>, nil] An array of experience IDs that this pass has
      #
      # @param global_affiliate_percentage [Float, nil] The percentage of the revenue that goes to the global affiliate program.
      #
      # @param global_affiliate_status [Symbol, Whopsdk::Models::GlobalAffiliateStatus, nil] The different statuses of the global affiliate program for an access pass.
      #
      # @param headline [String, nil] The headline of the access pass.
      #
      # @param industry_type [Symbol, Whopsdk::Models::IndustryTypes, nil] The different industry types a company can be in.
      #
      # @param member_affiliate_percentage [Float, nil] The percentage of the revenue that goes to the member affiliate program.
      #
      # @param member_affiliate_status [Symbol, Whopsdk::Models::GlobalAffiliateStatus, nil] The different statuses of the global affiliate program for an access pass.
      #
      # @param plan_options [Whopsdk::Models::ProductCreateParams::PlanOptions, nil] The details to assign an autogenerated plan.
      #
      # @param product_highlights [Array<Whopsdk::Models::ProductCreateParams::ProductHighlight>, nil] The product highlights for the access pass.
      #
      # @param product_tax_code_id [String, nil] The ID of the product tax code to apply to this access pass.
      #
      # @param redirect_purchase_url [String, nil] The URL to redirect the customer to after a purchase.
      #
      # @param route [String, nil] The route of the access pass.
      #
      # @param visibility [Symbol, Whopsdk::Models::Visibility, nil] Visibility of a resource
      #
      # @param request_options [Whopsdk::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Whopsdk::Models::Product]
      #
      # @see Whopsdk::Models::ProductCreateParams
      def create(params)
        parsed, options = Whopsdk::ProductCreateParams.dump_request(params)
        @client.request(
          method: :post,
          path: "products",
          body: parsed,
          model: Whopsdk::Product,
          options: options
        )
      end

      # Retrieves a product by ID or route
      #
      # Required permissions:
      #
      # - `access_pass:basic:read`
      #
      # @overload retrieve(id, request_options: {})
      #
      # @param id [String]
      # @param request_options [Whopsdk::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Whopsdk::Models::Product]
      #
      # @see Whopsdk::Models::ProductRetrieveParams
      def retrieve(id, params = {})
        @client.request(
          method: :get,
          path: ["products/%1$s", id],
          model: Whopsdk::Product,
          options: params[:request_options]
        )
      end

      # Some parameter documentations has been truncated, see
      # {Whopsdk::Models::ProductUpdateParams} for more details.
      #
      # Updates an existing Product
      #
      # Required permissions:
      #
      # - `access_pass:update`
      # - `access_pass:basic:read`
      #
      # @overload update(id, banner_image: nil, business_type: nil, collect_shipping_address: nil, custom_cta: nil, custom_cta_url: nil, custom_statement_descriptor: nil, description: nil, global_affiliate_percentage: nil, global_affiliate_status: nil, headline: nil, industry_type: nil, member_affiliate_percentage: nil, member_affiliate_status: nil, product_tax_code_id: nil, redirect_purchase_url: nil, route: nil, title: nil, visibility: nil, request_options: {})
      #
      # @param id [String]
      #
      # @param banner_image [Whopsdk::Models::ProductUpdateParams::BannerImage, nil] A banner image for the access pass in png, jpeg format
      #
      # @param business_type [Symbol, Whopsdk::Models::BusinessTypes, nil] The different business types a company can be.
      #
      # @param collect_shipping_address [Boolean, nil] Whether or not to collect shipping information at checkout from the customer.
      #
      # @param custom_cta [Symbol, Whopsdk::Models::CustomCta, nil] The different types of custom CTAs that can be selected.
      #
      # @param custom_cta_url [String, nil] The custom call to action URL for the access pass.
      #
      # @param custom_statement_descriptor [String, nil] The custom statement descriptor for the access pass i.e. WHOP\*SPORTS, must be
      # be
      #
      # @param description [String, nil] A written description of the access pass.
      #
      # @param global_affiliate_percentage [Float, nil] The percentage of the revenue that goes to the global affiliate program.
      #
      # @param global_affiliate_status [Symbol, Whopsdk::Models::GlobalAffiliateStatus, nil] The different statuses of the global affiliate program for an access pass.
      #
      # @param headline [String, nil] The headline of the access pass.
      #
      # @param industry_type [Symbol, Whopsdk::Models::IndustryTypes, nil] The different industry types a company can be in.
      #
      # @param member_affiliate_percentage [Float, nil] The percentage of the revenue that goes to the member affiliate program.
      #
      # @param member_affiliate_status [Symbol, Whopsdk::Models::GlobalAffiliateStatus, nil] The different statuses of the global affiliate program for an access pass.
      #
      # @param product_tax_code_id [String, nil] The ID of the product tax code to apply to this access pass.
      #
      # @param redirect_purchase_url [String, nil] The URL to redirect the customer to after a purchase.
      #
      # @param route [String, nil] The route of the access pass.
      #
      # @param title [String, nil] The title of the access pass.
      #
      # @param visibility [Symbol, Whopsdk::Models::Visibility, nil] Visibility of a resource
      #
      # @param request_options [Whopsdk::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Whopsdk::Models::Product]
      #
      # @see Whopsdk::Models::ProductUpdateParams
      def update(id, params = {})
        parsed, options = Whopsdk::ProductUpdateParams.dump_request(params)
        @client.request(
          method: :patch,
          path: ["products/%1$s", id],
          body: parsed,
          model: Whopsdk::Product,
          options: options
        )
      end

      # Lists products for a company
      #
      # Required permissions:
      #
      # - `access_pass:basic:read`
      #
      # @overload list(company_id:, after: nil, before: nil, direction: nil, first: nil, last: nil, order: nil, product_types: nil, visibilities: nil, request_options: {})
      #
      # @param company_id [String] The ID of the company to filter products by
      #
      # @param after [String, nil] Returns the elements in the list that come after the specified cursor.
      #
      # @param before [String, nil] Returns the elements in the list that come before the specified cursor.
      #
      # @param direction [Symbol, Whopsdk::Models::Direction, nil] The direction of the sort.
      #
      # @param first [Integer, nil] Returns the first _n_ elements from the list.
      #
      # @param last [Integer, nil] Returns the last _n_ elements from the list.
      #
      # @param order [Symbol, Whopsdk::Models::ProductListParams::Order, nil] The ways a relation of AccessPasses can be ordered
      #
      # @param product_types [Array<Symbol, Whopsdk::Models::AccessPassType>, nil] The type of products to filter by
      #
      # @param visibilities [Array<Symbol, Whopsdk::Models::VisibilityFilter>, nil] The visibility of the products to filter by
      #
      # @param request_options [Whopsdk::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Whopsdk::Internal::CursorPage<Whopsdk::Models::ProductListItem>]
      #
      # @see Whopsdk::Models::ProductListParams
      def list(params)
        parsed, options = Whopsdk::ProductListParams.dump_request(params)
        @client.request(
          method: :get,
          path: "products",
          query: parsed,
          page: Whopsdk::Internal::CursorPage,
          model: Whopsdk::ProductListItem,
          options: options
        )
      end

      # Deletes an existing Product
      #
      # Required permissions:
      #
      # - `access_pass:delete`
      #
      # @overload delete(id, request_options: {})
      #
      # @param id [String]
      # @param request_options [Whopsdk::RequestOptions, Hash{Symbol=>Object}, nil]
      #
      # @return [Boolean]
      #
      # @see Whopsdk::Models::ProductDeleteParams
      def delete(id, params = {})
        @client.request(
          method: :delete,
          path: ["products/%1$s", id],
          model: Whopsdk::Internal::Type::Boolean,
          options: params[:request_options]
        )
      end

      # @api private
      #
      # @param client [Whopsdk::Client]
      def initialize(client:)
        @client = client
      end
    end
  end
end
