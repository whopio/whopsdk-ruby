# typed: strong

module WhopSDK
  module Models
    class AppBuildCreateParams < WhopSDK::Internal::Type::BaseModel
      extend WhopSDK::Internal::Type::RequestParameters::Converter
      include WhopSDK::Internal::Type::RequestParameters

      OrHash =
        T.type_alias do
          T.any(WhopSDK::AppBuildCreateParams, WhopSDK::Internal::AnyHash)
        end

      # Attachment input for the app build file. This should be an upload in .zip
      # format. The zip should contain at least one main_js_bundle.hbc file and
      # optionally an assets folder next to it.
      sig do
        returns(
          T.any(
            WhopSDK::AppBuildCreateParams::Attachment::DirectUploadID,
            WhopSDK::AppBuildCreateParams::Attachment::ID
          )
        )
      end
      attr_accessor :attachment

      # Checksum of the app build file. This is generated by the client and used to
      # verify the integrity of the file that is submitted when un-packaged later on a
      # device.
      sig { returns(String) }
      attr_accessor :checksum

      # The platform of the app build (ios, android, web)
      sig { returns(WhopSDK::AppBuildPlatforms::OrSymbol) }
      attr_accessor :platform

      # The ID of the app to create a build for. By default the current app from the api
      # key is used.
      sig { returns(T.nilable(String)) }
      attr_accessor :app_id

      # Supported app view types for the app build. A build can specify multiple view
      # types, but should only specify ones that its code supports.
      sig { returns(T.nilable(T::Array[WhopSDK::AppViewType::OrSymbol])) }
      attr_accessor :supported_app_view_types

      sig do
        params(
          attachment:
            T.any(
              WhopSDK::AppBuildCreateParams::Attachment::DirectUploadID::OrHash,
              WhopSDK::AppBuildCreateParams::Attachment::ID::OrHash
            ),
          checksum: String,
          platform: WhopSDK::AppBuildPlatforms::OrSymbol,
          app_id: T.nilable(String),
          supported_app_view_types:
            T.nilable(T::Array[WhopSDK::AppViewType::OrSymbol]),
          request_options: WhopSDK::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # Attachment input for the app build file. This should be an upload in .zip
        # format. The zip should contain at least one main_js_bundle.hbc file and
        # optionally an assets folder next to it.
        attachment:,
        # Checksum of the app build file. This is generated by the client and used to
        # verify the integrity of the file that is submitted when un-packaged later on a
        # device.
        checksum:,
        # The platform of the app build (ios, android, web)
        platform:,
        # The ID of the app to create a build for. By default the current app from the api
        # key is used.
        app_id: nil,
        # Supported app view types for the app build. A build can specify multiple view
        # types, but should only specify ones that its code supports.
        supported_app_view_types: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            attachment:
              T.any(
                WhopSDK::AppBuildCreateParams::Attachment::DirectUploadID,
                WhopSDK::AppBuildCreateParams::Attachment::ID
              ),
            checksum: String,
            platform: WhopSDK::AppBuildPlatforms::OrSymbol,
            app_id: T.nilable(String),
            supported_app_view_types:
              T.nilable(T::Array[WhopSDK::AppViewType::OrSymbol]),
            request_options: WhopSDK::RequestOptions
          }
        )
      end
      def to_hash
      end

      # Attachment input for the app build file. This should be an upload in .zip
      # format. The zip should contain at least one main_js_bundle.hbc file and
      # optionally an assets folder next to it.
      module Attachment
        extend WhopSDK::Internal::Type::Union

        Variants =
          T.type_alias do
            T.any(
              WhopSDK::AppBuildCreateParams::Attachment::DirectUploadID,
              WhopSDK::AppBuildCreateParams::Attachment::ID
            )
          end

        class DirectUploadID < WhopSDK::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                WhopSDK::AppBuildCreateParams::Attachment::DirectUploadID,
                WhopSDK::Internal::AnyHash
              )
            end

          # This ID should be used the first time you upload an attachment. It is the ID of
          # the direct upload that was created when uploading the file to S3 via the
          # mediaDirectUpload mutation.
          sig { returns(String) }
          attr_accessor :direct_upload_id

          # Input for an attachment
          sig { params(direct_upload_id: String).returns(T.attached_class) }
          def self.new(
            # This ID should be used the first time you upload an attachment. It is the ID of
            # the direct upload that was created when uploading the file to S3 via the
            # mediaDirectUpload mutation.
            direct_upload_id:
          )
          end

          sig { override.returns({ direct_upload_id: String }) }
          def to_hash
          end
        end

        class ID < WhopSDK::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                WhopSDK::AppBuildCreateParams::Attachment::ID,
                WhopSDK::Internal::AnyHash
              )
            end

          # The ID of an existing attachment object. Use this when updating a resource and
          # keeping a subset of the attachments. Don't use this unless you know what you're
          # doing.
          sig { returns(String) }
          attr_accessor :id

          # Input for an attachment
          sig { params(id: String).returns(T.attached_class) }
          def self.new(
            # The ID of an existing attachment object. Use this when updating a resource and
            # keeping a subset of the attachments. Don't use this unless you know what you're
            # doing.
            id:
          )
          end

          sig { override.returns({ id: String }) }
          def to_hash
          end
        end

        sig do
          override.returns(
            T::Array[WhopSDK::AppBuildCreateParams::Attachment::Variants]
          )
        end
        def self.variants
        end
      end
    end
  end
end
