# typed: strong

module WhopSDK
  module Models
    class ProductCreateParams < WhopSDK::Internal::Type::BaseModel
      extend WhopSDK::Internal::Type::RequestParameters::Converter
      include WhopSDK::Internal::Type::RequestParameters

      OrHash =
        T.type_alias do
          T.any(WhopSDK::ProductCreateParams, WhopSDK::Internal::AnyHash)
        end

      # The ID of the company to create the product for.
      sig { returns(String) }
      attr_accessor :company_id

      # The title of the product.
      sig { returns(String) }
      attr_accessor :title

      # The different types an access pass can be.
      sig { returns(T.nilable(WhopSDK::AccessPassType::OrSymbol)) }
      attr_accessor :access_pass_type

      # A banner image for the product in png, jpeg format
      sig { returns(T.nilable(WhopSDK::ProductCreateParams::BannerImage)) }
      attr_reader :banner_image

      sig do
        params(
          banner_image:
            T.nilable(WhopSDK::ProductCreateParams::BannerImage::OrHash)
        ).void
      end
      attr_writer :banner_image

      # The different business types a company can be.
      sig { returns(T.nilable(WhopSDK::BusinessTypes::OrSymbol)) }
      attr_accessor :business_type

      # Whether or not to collect shipping information at checkout from the customer.
      sig { returns(T.nilable(T::Boolean)) }
      attr_accessor :collect_shipping_address

      # The different types of custom CTAs that can be selected.
      sig { returns(T.nilable(WhopSDK::CustomCta::OrSymbol)) }
      attr_accessor :custom_cta

      # The custom call to action URL for the product.
      sig { returns(T.nilable(String)) }
      attr_accessor :custom_cta_url

      # The custom statement descriptor for the product i.e. WHOP\*SPORTS, must be
      # between 5 and 22 characters, contain at least one letter, and not contain any of
      # the following characters: <, >, \, ', "
      sig { returns(T.nilable(String)) }
      attr_accessor :custom_statement_descriptor

      # A written description of the product.
      sig { returns(T.nilable(String)) }
      attr_accessor :description

      # An array of experience IDs that this pass has
      sig { returns(T.nilable(T::Array[String])) }
      attr_accessor :experience_ids

      # The percentage of the revenue that goes to the global affiliate program.
      sig { returns(T.nilable(Float)) }
      attr_accessor :global_affiliate_percentage

      # The different statuses of the global affiliate program for an access pass.
      sig { returns(T.nilable(WhopSDK::GlobalAffiliateStatus::OrSymbol)) }
      attr_accessor :global_affiliate_status

      # The headline of the product.
      sig { returns(T.nilable(String)) }
      attr_accessor :headline

      # The different industry types a company can be in.
      sig { returns(T.nilable(WhopSDK::IndustryTypes::OrSymbol)) }
      attr_accessor :industry_type

      # The percentage of the revenue that goes to the member affiliate program.
      sig { returns(T.nilable(Float)) }
      attr_accessor :member_affiliate_percentage

      # The different statuses of the global affiliate program for an access pass.
      sig { returns(T.nilable(WhopSDK::GlobalAffiliateStatus::OrSymbol)) }
      attr_accessor :member_affiliate_status

      # The details to assign an autogenerated plan.
      sig { returns(T.nilable(WhopSDK::ProductCreateParams::PlanOptions)) }
      attr_reader :plan_options

      sig do
        params(
          plan_options:
            T.nilable(WhopSDK::ProductCreateParams::PlanOptions::OrHash)
        ).void
      end
      attr_writer :plan_options

      # The product highlights for the product.
      sig do
        returns(
          T.nilable(T::Array[WhopSDK::ProductCreateParams::ProductHighlight])
        )
      end
      attr_accessor :product_highlights

      # The ID of the product tax code to apply to this product.
      sig { returns(T.nilable(String)) }
      attr_accessor :product_tax_code_id

      # The URL to redirect the customer to after a purchase.
      sig { returns(T.nilable(String)) }
      attr_accessor :redirect_purchase_url

      # The route of the product.
      sig { returns(T.nilable(String)) }
      attr_accessor :route

      # Visibility of a resource
      sig { returns(T.nilable(WhopSDK::Visibility::OrSymbol)) }
      attr_accessor :visibility

      sig do
        params(
          company_id: String,
          title: String,
          access_pass_type: T.nilable(WhopSDK::AccessPassType::OrSymbol),
          banner_image:
            T.nilable(WhopSDK::ProductCreateParams::BannerImage::OrHash),
          business_type: T.nilable(WhopSDK::BusinessTypes::OrSymbol),
          collect_shipping_address: T.nilable(T::Boolean),
          custom_cta: T.nilable(WhopSDK::CustomCta::OrSymbol),
          custom_cta_url: T.nilable(String),
          custom_statement_descriptor: T.nilable(String),
          description: T.nilable(String),
          experience_ids: T.nilable(T::Array[String]),
          global_affiliate_percentage: T.nilable(Float),
          global_affiliate_status:
            T.nilable(WhopSDK::GlobalAffiliateStatus::OrSymbol),
          headline: T.nilable(String),
          industry_type: T.nilable(WhopSDK::IndustryTypes::OrSymbol),
          member_affiliate_percentage: T.nilable(Float),
          member_affiliate_status:
            T.nilable(WhopSDK::GlobalAffiliateStatus::OrSymbol),
          plan_options:
            T.nilable(WhopSDK::ProductCreateParams::PlanOptions::OrHash),
          product_highlights:
            T.nilable(
              T::Array[WhopSDK::ProductCreateParams::ProductHighlight::OrHash]
            ),
          product_tax_code_id: T.nilable(String),
          redirect_purchase_url: T.nilable(String),
          route: T.nilable(String),
          visibility: T.nilable(WhopSDK::Visibility::OrSymbol),
          request_options: WhopSDK::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # The ID of the company to create the product for.
        company_id:,
        # The title of the product.
        title:,
        # The different types an access pass can be.
        access_pass_type: nil,
        # A banner image for the product in png, jpeg format
        banner_image: nil,
        # The different business types a company can be.
        business_type: nil,
        # Whether or not to collect shipping information at checkout from the customer.
        collect_shipping_address: nil,
        # The different types of custom CTAs that can be selected.
        custom_cta: nil,
        # The custom call to action URL for the product.
        custom_cta_url: nil,
        # The custom statement descriptor for the product i.e. WHOP\*SPORTS, must be
        # between 5 and 22 characters, contain at least one letter, and not contain any of
        # the following characters: <, >, \, ', "
        custom_statement_descriptor: nil,
        # A written description of the product.
        description: nil,
        # An array of experience IDs that this pass has
        experience_ids: nil,
        # The percentage of the revenue that goes to the global affiliate program.
        global_affiliate_percentage: nil,
        # The different statuses of the global affiliate program for an access pass.
        global_affiliate_status: nil,
        # The headline of the product.
        headline: nil,
        # The different industry types a company can be in.
        industry_type: nil,
        # The percentage of the revenue that goes to the member affiliate program.
        member_affiliate_percentage: nil,
        # The different statuses of the global affiliate program for an access pass.
        member_affiliate_status: nil,
        # The details to assign an autogenerated plan.
        plan_options: nil,
        # The product highlights for the product.
        product_highlights: nil,
        # The ID of the product tax code to apply to this product.
        product_tax_code_id: nil,
        # The URL to redirect the customer to after a purchase.
        redirect_purchase_url: nil,
        # The route of the product.
        route: nil,
        # Visibility of a resource
        visibility: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            company_id: String,
            title: String,
            access_pass_type: T.nilable(WhopSDK::AccessPassType::OrSymbol),
            banner_image: T.nilable(WhopSDK::ProductCreateParams::BannerImage),
            business_type: T.nilable(WhopSDK::BusinessTypes::OrSymbol),
            collect_shipping_address: T.nilable(T::Boolean),
            custom_cta: T.nilable(WhopSDK::CustomCta::OrSymbol),
            custom_cta_url: T.nilable(String),
            custom_statement_descriptor: T.nilable(String),
            description: T.nilable(String),
            experience_ids: T.nilable(T::Array[String]),
            global_affiliate_percentage: T.nilable(Float),
            global_affiliate_status:
              T.nilable(WhopSDK::GlobalAffiliateStatus::OrSymbol),
            headline: T.nilable(String),
            industry_type: T.nilable(WhopSDK::IndustryTypes::OrSymbol),
            member_affiliate_percentage: T.nilable(Float),
            member_affiliate_status:
              T.nilable(WhopSDK::GlobalAffiliateStatus::OrSymbol),
            plan_options: T.nilable(WhopSDK::ProductCreateParams::PlanOptions),
            product_highlights:
              T.nilable(
                T::Array[WhopSDK::ProductCreateParams::ProductHighlight]
              ),
            product_tax_code_id: T.nilable(String),
            redirect_purchase_url: T.nilable(String),
            route: T.nilable(String),
            visibility: T.nilable(WhopSDK::Visibility::OrSymbol),
            request_options: WhopSDK::RequestOptions
          }
        )
      end
      def to_hash
      end

      class BannerImage < WhopSDK::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              WhopSDK::ProductCreateParams::BannerImage,
              WhopSDK::Internal::AnyHash
            )
          end

        # The ID of an existing attachment object. Use this when updating a resource and
        # keeping a subset of the attachments. Don't use this unless you know what you're
        # doing.
        sig { returns(T.nilable(String)) }
        attr_accessor :id

        # This ID should be used the first time you upload an attachment. It is the ID of
        # the direct upload that was created when uploading the file to S3 via the
        # mediaDirectUpload mutation.
        sig { returns(T.nilable(String)) }
        attr_accessor :direct_upload_id

        # A banner image for the product in png, jpeg format
        sig do
          params(
            id: T.nilable(String),
            direct_upload_id: T.nilable(String)
          ).returns(T.attached_class)
        end
        def self.new(
          # The ID of an existing attachment object. Use this when updating a resource and
          # keeping a subset of the attachments. Don't use this unless you know what you're
          # doing.
          id: nil,
          # This ID should be used the first time you upload an attachment. It is the ID of
          # the direct upload that was created when uploading the file to S3 via the
          # mediaDirectUpload mutation.
          direct_upload_id: nil
        )
        end

        sig do
          override.returns(
            { id: T.nilable(String), direct_upload_id: T.nilable(String) }
          )
        end
        def to_hash
        end
      end

      class PlanOptions < WhopSDK::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              WhopSDK::ProductCreateParams::PlanOptions,
              WhopSDK::Internal::AnyHash
            )
          end

        # The available currencies on the platform
        sig { returns(T.nilable(WhopSDK::Currency::OrSymbol)) }
        attr_accessor :base_currency

        # The interval at which the plan charges (renewal plans).
        sig { returns(T.nilable(Integer)) }
        attr_accessor :billing_period

        # An array of custom field objects.
        sig do
          returns(
            T.nilable(
              T::Array[WhopSDK::ProductCreateParams::PlanOptions::CustomField]
            )
          )
        end
        attr_accessor :custom_fields

        # An additional amount charged upon first purchase.
        sig { returns(T.nilable(Float)) }
        attr_accessor :initial_price

        # The type of plan that can be attached to an access pass
        sig { returns(T.nilable(WhopSDK::PlanType::OrSymbol)) }
        attr_accessor :plan_type

        # The methods of how a plan can be released.
        sig { returns(T.nilable(WhopSDK::ReleaseMethod::OrSymbol)) }
        attr_accessor :release_method

        # The amount the customer is charged every billing period.
        sig { returns(T.nilable(Float)) }
        attr_accessor :renewal_price

        # Visibility of a resource
        sig { returns(T.nilable(WhopSDK::Visibility::OrSymbol)) }
        attr_accessor :visibility

        # The details to assign an autogenerated plan.
        sig do
          params(
            base_currency: T.nilable(WhopSDK::Currency::OrSymbol),
            billing_period: T.nilable(Integer),
            custom_fields:
              T.nilable(
                T::Array[
                  WhopSDK::ProductCreateParams::PlanOptions::CustomField::OrHash
                ]
              ),
            initial_price: T.nilable(Float),
            plan_type: T.nilable(WhopSDK::PlanType::OrSymbol),
            release_method: T.nilable(WhopSDK::ReleaseMethod::OrSymbol),
            renewal_price: T.nilable(Float),
            visibility: T.nilable(WhopSDK::Visibility::OrSymbol)
          ).returns(T.attached_class)
        end
        def self.new(
          # The available currencies on the platform
          base_currency: nil,
          # The interval at which the plan charges (renewal plans).
          billing_period: nil,
          # An array of custom field objects.
          custom_fields: nil,
          # An additional amount charged upon first purchase.
          initial_price: nil,
          # The type of plan that can be attached to an access pass
          plan_type: nil,
          # The methods of how a plan can be released.
          release_method: nil,
          # The amount the customer is charged every billing period.
          renewal_price: nil,
          # Visibility of a resource
          visibility: nil
        )
        end

        sig do
          override.returns(
            {
              base_currency: T.nilable(WhopSDK::Currency::OrSymbol),
              billing_period: T.nilable(Integer),
              custom_fields:
                T.nilable(
                  T::Array[
                    WhopSDK::ProductCreateParams::PlanOptions::CustomField
                  ]
                ),
              initial_price: T.nilable(Float),
              plan_type: T.nilable(WhopSDK::PlanType::OrSymbol),
              release_method: T.nilable(WhopSDK::ReleaseMethod::OrSymbol),
              renewal_price: T.nilable(Float),
              visibility: T.nilable(WhopSDK::Visibility::OrSymbol)
            }
          )
        end
        def to_hash
        end

        class CustomField < WhopSDK::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                WhopSDK::ProductCreateParams::PlanOptions::CustomField,
                WhopSDK::Internal::AnyHash
              )
            end

          # The type of the custom field.
          sig { returns(Symbol) }
          attr_accessor :field_type

          # The name of the custom field.
          sig { returns(String) }
          attr_accessor :name

          # The ID of the custom field (if being updated)
          sig { returns(T.nilable(String)) }
          attr_accessor :id

          # The order of the field.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :order

          # The placeholder value of the field.
          sig { returns(T.nilable(String)) }
          attr_accessor :placeholder

          # Whether or not the field is required.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :required

          sig do
            params(
              name: String,
              id: T.nilable(String),
              order: T.nilable(Integer),
              placeholder: T.nilable(String),
              required: T.nilable(T::Boolean),
              field_type: Symbol
            ).returns(T.attached_class)
          end
          def self.new(
            # The name of the custom field.
            name:,
            # The ID of the custom field (if being updated)
            id: nil,
            # The order of the field.
            order: nil,
            # The placeholder value of the field.
            placeholder: nil,
            # Whether or not the field is required.
            required: nil,
            # The type of the custom field.
            field_type: :text
          )
          end

          sig do
            override.returns(
              {
                field_type: Symbol,
                name: String,
                id: T.nilable(String),
                order: T.nilable(Integer),
                placeholder: T.nilable(String),
                required: T.nilable(T::Boolean)
              }
            )
          end
          def to_hash
          end
        end
      end

      class ProductHighlight < WhopSDK::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              WhopSDK::ProductCreateParams::ProductHighlight,
              WhopSDK::Internal::AnyHash
            )
          end

        # Text to display to describe the product highlight (max length 250 for
        # qualification or benefits, 170 for who this is for, 140 for pricing features).
        sig { returns(String) }
        attr_accessor :content

        # The type of this highlight.
        sig do
          returns(
            WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::OrSymbol
          )
        end
        attr_accessor :highlight_type

        # The title of the product highlight, if applicable.
        sig { returns(T.nilable(String)) }
        attr_accessor :title

        # Input for creating a product highlight
        sig do
          params(
            content: String,
            highlight_type:
              WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::OrSymbol,
            title: T.nilable(String)
          ).returns(T.attached_class)
        end
        def self.new(
          # Text to display to describe the product highlight (max length 250 for
          # qualification or benefits, 170 for who this is for, 140 for pricing features).
          content:,
          # The type of this highlight.
          highlight_type:,
          # The title of the product highlight, if applicable.
          title: nil
        )
        end

        sig do
          override.returns(
            {
              content: String,
              highlight_type:
                WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::OrSymbol,
              title: T.nilable(String)
            }
          )
        end
        def to_hash
        end

        # The type of this highlight.
        module HighlightType
          extend WhopSDK::Internal::Type::Enum

          TaggedSymbol =
            T.type_alias do
              T.all(
                Symbol,
                WhopSDK::ProductCreateParams::ProductHighlight::HighlightType
              )
            end
          OrSymbol = T.type_alias { T.any(Symbol, String) }

          QUALIFICATION =
            T.let(
              :qualification,
              WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::TaggedSymbol
            )
          BENEFIT =
            T.let(
              :benefit,
              WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::TaggedSymbol
            )
          WHO_THIS_IS_FOR =
            T.let(
              :who_this_is_for,
              WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::TaggedSymbol
            )
          PRICING_FEATURE =
            T.let(
              :pricing_feature,
              WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::TaggedSymbol
            )

          sig do
            override.returns(
              T::Array[
                WhopSDK::ProductCreateParams::ProductHighlight::HighlightType::TaggedSymbol
              ]
            )
          end
          def self.values
          end
        end
      end
    end
  end
end
