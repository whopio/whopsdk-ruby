# typed: strong

module Whopsdk
  module Resources
    class Products
      # Creates a new Product
      #
      # Required permissions:
      #
      # - `access_pass:create`
      # - `access_pass:basic:read`
      sig do
        params(
          company_id: String,
          title: String,
          access_pass_type: T.nilable(Whopsdk::AccessPassType::OrSymbol),
          banner_image:
            T.nilable(Whopsdk::ProductCreateParams::BannerImage::OrHash),
          business_type: T.nilable(Whopsdk::BusinessTypes::OrSymbol),
          custom_cta: T.nilable(Whopsdk::CustomCta::OrSymbol),
          custom_cta_url: T.nilable(String),
          custom_statement_descriptor: T.nilable(String),
          description: T.nilable(String),
          experience_ids: T.nilable(T::Array[String]),
          global_affiliate_percentage: T.nilable(Float),
          global_affiliate_status:
            T.nilable(Whopsdk::GlobalAffiliateStatus::OrSymbol),
          headline: T.nilable(String),
          industry_type: T.nilable(Whopsdk::IndustryTypes::OrSymbol),
          member_affiliate_percentage: T.nilable(Float),
          member_affiliate_status:
            T.nilable(Whopsdk::GlobalAffiliateStatus::OrSymbol),
          plan_options:
            T.nilable(Whopsdk::ProductCreateParams::PlanOptions::OrHash),
          product_highlights:
            T.nilable(
              T::Array[Whopsdk::ProductCreateParams::ProductHighlight::OrHash]
            ),
          product_tax_code_id: T.nilable(String),
          redirect_purchase_url: T.nilable(String),
          route: T.nilable(String),
          visibility: T.nilable(Whopsdk::Visibility::OrSymbol),
          request_options: Whopsdk::RequestOptions::OrHash
        ).returns(T.nilable(Whopsdk::Product))
      end
      def create(
        # The ID of the company to create the access pass for.
        company_id:,
        # The title of the access pass.
        title:,
        # The different types an access pass can be.
        access_pass_type: nil,
        # A banner image for the access pass in png, jpeg format
        banner_image: nil,
        # The different business types a company can be.
        business_type: nil,
        # The different types of custom CTAs that can be selected.
        custom_cta: nil,
        # The custom call to action URL for the access pass.
        custom_cta_url: nil,
        # The custom statement descriptor for the access pass i.e. WHOP\*SPORTS, must be
        # between 5 and 22 characters, contain at least one letter, and not contain any of
        # the following characters: <, >, \, ', "
        custom_statement_descriptor: nil,
        # A written description of the access pass.
        description: nil,
        # An array of experience IDs that this pass has
        experience_ids: nil,
        # The percentage of the revenue that goes to the global affiliate program.
        global_affiliate_percentage: nil,
        # The different statuses of the global affiliate program for an access pass.
        global_affiliate_status: nil,
        # The headline of the access pass.
        headline: nil,
        # The different industry types a company can be in.
        industry_type: nil,
        # The percentage of the revenue that goes to the member affiliate program.
        member_affiliate_percentage: nil,
        # The different statuses of the global affiliate program for an access pass.
        member_affiliate_status: nil,
        # The details to assign an autogenerated plan.
        plan_options: nil,
        # The product highlights for the access pass.
        product_highlights: nil,
        # The ID of the product tax code to apply to this access pass.
        product_tax_code_id: nil,
        # The URL to redirect the customer to after a purchase.
        redirect_purchase_url: nil,
        # The route of the access pass.
        route: nil,
        # Visibility of a resource
        visibility: nil,
        request_options: {}
      )
      end

      # Retrieves a product by ID or route
      #
      # Required permissions:
      #
      # - `access_pass:basic:read`
      sig do
        params(
          id: String,
          request_options: Whopsdk::RequestOptions::OrHash
        ).returns(T.nilable(Whopsdk::Product))
      end
      def retrieve(id, request_options: {})
      end

      # Updates an existing Product
      #
      # Required permissions:
      #
      # - `access_pass:update`
      # - `access_pass:basic:read`
      sig do
        params(
          id: String,
          banner_image:
            T.nilable(Whopsdk::ProductUpdateParams::BannerImage::OrHash),
          business_type: T.nilable(Whopsdk::BusinessTypes::OrSymbol),
          custom_cta: T.nilable(Whopsdk::CustomCta::OrSymbol),
          custom_cta_url: T.nilable(String),
          custom_statement_descriptor: T.nilable(String),
          description: T.nilable(String),
          global_affiliate_percentage: T.nilable(Float),
          global_affiliate_status:
            T.nilable(Whopsdk::GlobalAffiliateStatus::OrSymbol),
          headline: T.nilable(String),
          industry_type: T.nilable(Whopsdk::IndustryTypes::OrSymbol),
          member_affiliate_percentage: T.nilable(Float),
          member_affiliate_status:
            T.nilable(Whopsdk::GlobalAffiliateStatus::OrSymbol),
          product_tax_code_id: T.nilable(String),
          redirect_purchase_url: T.nilable(String),
          route: T.nilable(String),
          title: T.nilable(String),
          visibility: T.nilable(Whopsdk::Visibility::OrSymbol),
          request_options: Whopsdk::RequestOptions::OrHash
        ).returns(T.nilable(Whopsdk::Product))
      end
      def update(
        id,
        # A banner image for the access pass in png, jpeg format
        banner_image: nil,
        # The different business types a company can be.
        business_type: nil,
        # The different types of custom CTAs that can be selected.
        custom_cta: nil,
        # The custom call to action URL for the access pass.
        custom_cta_url: nil,
        # The custom statement descriptor for the access pass i.e. WHOP\*SPORTS, must be
        # between 5 and 22 characters, contain at least one letter, and not contain any of
        # the following characters: <, >, \, ', "
        custom_statement_descriptor: nil,
        # A written description of the access pass.
        description: nil,
        # The percentage of the revenue that goes to the global affiliate program.
        global_affiliate_percentage: nil,
        # The different statuses of the global affiliate program for an access pass.
        global_affiliate_status: nil,
        # The headline of the access pass.
        headline: nil,
        # The different industry types a company can be in.
        industry_type: nil,
        # The percentage of the revenue that goes to the member affiliate program.
        member_affiliate_percentage: nil,
        # The different statuses of the global affiliate program for an access pass.
        member_affiliate_status: nil,
        # The ID of the product tax code to apply to this access pass.
        product_tax_code_id: nil,
        # The URL to redirect the customer to after a purchase.
        redirect_purchase_url: nil,
        # The route of the access pass.
        route: nil,
        # The title of the access pass.
        title: nil,
        # Visibility of a resource
        visibility: nil,
        request_options: {}
      )
      end

      # Lists products for a company
      #
      # Required permissions:
      #
      # - `access_pass:basic:read`
      sig do
        params(
          company_id: String,
          after: T.nilable(String),
          before: T.nilable(String),
          direction: T.nilable(Whopsdk::Direction::OrSymbol),
          first: T.nilable(Integer),
          last: T.nilable(Integer),
          order: T.nilable(Whopsdk::ProductListParams::Order::OrSymbol),
          product_types:
            T.nilable(T::Array[T.nilable(Whopsdk::AccessPassType::OrSymbol)]),
          visibilities:
            T.nilable(T::Array[T.nilable(Whopsdk::VisibilityFilter::OrSymbol)]),
          request_options: Whopsdk::RequestOptions::OrHash
        ).returns(
          Whopsdk::Internal::CursorPage[T.nilable(Whopsdk::ProductListItem)]
        )
      end
      def list(
        # The ID of the company to filter products by
        company_id:,
        # Returns the elements in the list that come after the specified cursor.
        after: nil,
        # Returns the elements in the list that come before the specified cursor.
        before: nil,
        # The direction of the sort.
        direction: nil,
        # Returns the first _n_ elements from the list.
        first: nil,
        # Returns the last _n_ elements from the list.
        last: nil,
        # The ways a relation of AccessPasses can be ordered
        order: nil,
        # The type of products to filter by
        product_types: nil,
        # The visibility of the products to filter by
        visibilities: nil,
        request_options: {}
      )
      end

      # Deletes an existing Product
      #
      # Required permissions:
      #
      # - `access_pass:delete`
      sig do
        params(
          id: String,
          request_options: Whopsdk::RequestOptions::OrHash
        ).returns(T.nilable(T::Boolean))
      end
      def delete(id, request_options: {})
      end

      # @api private
      sig { params(client: Whopsdk::Client).returns(T.attached_class) }
      def self.new(client:)
      end
    end
  end
end
