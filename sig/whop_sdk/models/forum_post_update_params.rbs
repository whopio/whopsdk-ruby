module WhopSDK
  module Models
    type forum_post_update_params =
      {
        attachments: ::Array[WhopSDK::Models::ForumPostUpdateParams::attachment]?,
        content: String?,
        is_pinned: bool?,
        title: String?
      }
      & WhopSDK::Internal::Type::request_parameters

    class ForumPostUpdateParams < WhopSDK::Internal::Type::BaseModel
      extend WhopSDK::Internal::Type::RequestParameters::Converter
      include WhopSDK::Internal::Type::RequestParameters

      attr_accessor attachments: ::Array[WhopSDK::Models::ForumPostUpdateParams::attachment]?

      attr_accessor content: String?

      attr_accessor is_pinned: bool?

      attr_accessor title: String?

      def initialize: (
        ?attachments: ::Array[WhopSDK::Models::ForumPostUpdateParams::attachment]?,
        ?content: String?,
        ?is_pinned: bool?,
        ?title: String?,
        ?request_options: WhopSDK::request_opts
      ) -> void

      def to_hash: -> {
        attachments: ::Array[WhopSDK::Models::ForumPostUpdateParams::attachment]?,
        content: String?,
        is_pinned: bool?,
        title: String?,
        request_options: WhopSDK::RequestOptions
      }

      type attachment =
        WhopSDK::ForumPostUpdateParams::Attachment::DirectUploadID
        | WhopSDK::ForumPostUpdateParams::Attachment::ID

      module Attachment
        extend WhopSDK::Internal::Type::Union

        type direct_upload_id = { direct_upload_id: String }

        class DirectUploadID < WhopSDK::Internal::Type::BaseModel
          attr_accessor direct_upload_id: String

          def initialize: (direct_upload_id: String) -> void

          def to_hash: -> { direct_upload_id: String }
        end

        type id = { id: String }

        class ID < WhopSDK::Internal::Type::BaseModel
          attr_accessor id: String

          def initialize: (id: String) -> void

          def to_hash: -> { id: String }
        end

        def self?.variants: -> ::Array[WhopSDK::Models::ForumPostUpdateParams::attachment]
      end
    end
  end
end
