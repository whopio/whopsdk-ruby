module WhopSDK
  module Models
    type message =
      {
        id: String,
        content: String?,
        created_at: Time,
        is_edited: bool,
        is_pinned: bool,
        message_type: WhopSDK::Models::dms_post_types,
        poll: WhopSDK::Message::Poll?,
        poll_votes: ::Array[WhopSDK::Message::PollVote],
        reaction_counts: ::Array[WhopSDK::Message::ReactionCount],
        replying_to_message_id: String?,
        updated_at: Time,
        user: WhopSDK::Message::User,
        view_count: Integer?
      }

    class Message < WhopSDK::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor content: String?

      attr_accessor created_at: Time

      attr_accessor is_edited: bool

      attr_accessor is_pinned: bool

      attr_accessor message_type: WhopSDK::Models::dms_post_types

      attr_accessor poll: WhopSDK::Message::Poll?

      attr_accessor poll_votes: ::Array[WhopSDK::Message::PollVote]

      attr_accessor reaction_counts: ::Array[WhopSDK::Message::ReactionCount]

      attr_accessor replying_to_message_id: String?

      attr_accessor updated_at: Time

      attr_accessor user: WhopSDK::Message::User

      attr_accessor view_count: Integer?

      def initialize: (
        id: String,
        content: String?,
        created_at: Time,
        is_edited: bool,
        is_pinned: bool,
        message_type: WhopSDK::Models::dms_post_types,
        poll: WhopSDK::Message::Poll?,
        poll_votes: ::Array[WhopSDK::Message::PollVote],
        reaction_counts: ::Array[WhopSDK::Message::ReactionCount],
        replying_to_message_id: String?,
        updated_at: Time,
        user: WhopSDK::Message::User,
        view_count: Integer?
      ) -> void

      def to_hash: -> {
        id: String,
        content: String?,
        created_at: Time,
        is_edited: bool,
        is_pinned: bool,
        message_type: WhopSDK::Models::dms_post_types,
        poll: WhopSDK::Message::Poll?,
        poll_votes: ::Array[WhopSDK::Message::PollVote],
        reaction_counts: ::Array[WhopSDK::Message::ReactionCount],
        replying_to_message_id: String?,
        updated_at: Time,
        user: WhopSDK::Message::User,
        view_count: Integer?
      }

      type poll = { options: ::Array[WhopSDK::Message::Poll::Option]? }

      class Poll < WhopSDK::Internal::Type::BaseModel
        attr_accessor options: ::Array[WhopSDK::Message::Poll::Option]?

        def initialize: (
          options: ::Array[WhopSDK::Message::Poll::Option]?
        ) -> void

        def to_hash: -> { options: ::Array[WhopSDK::Message::Poll::Option]? }

        type option = { id: String, text: String }

        class Option < WhopSDK::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor text: String

          def initialize: (id: String, text: String) -> void

          def to_hash: -> { id: String, text: String }
        end
      end

      type poll_vote = { count: Integer, option_id: String? }

      class PollVote < WhopSDK::Internal::Type::BaseModel
        attr_accessor count: Integer

        attr_accessor option_id: String?

        def initialize: (count: Integer, option_id: String?) -> void

        def to_hash: -> { count: Integer, option_id: String? }
      end

      type reaction_count = { count: Integer, emoji: String? }

      class ReactionCount < WhopSDK::Internal::Type::BaseModel
        attr_accessor count: Integer

        attr_accessor emoji: String?

        def initialize: (count: Integer, emoji: String?) -> void

        def to_hash: -> { count: Integer, emoji: String? }
      end

      type user = { id: String, name: String?, username: String }

      class User < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor name: String?

        attr_accessor username: String

        def initialize: (id: String, name: String?, username: String) -> void

        def to_hash: -> { id: String, name: String?, username: String }
      end
    end
  end
end
