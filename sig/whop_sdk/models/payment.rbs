module WhopSDK
  module Models
    type payment =
      {
        id: String,
        amount_after_fees: Float,
        auto_refunded: bool,
        billing_address: WhopSDK::Payment::BillingAddress?,
        billing_reason: WhopSDK::Models::Payment::billing_reason?,
        card_brand: WhopSDK::Models::Payment::card_brand?,
        :card_last4 => String?,
        company: WhopSDK::Payment::Company?,
        created_at: Time,
        currency: WhopSDK::Models::currency?,
        dispute_alerted_at: Time?,
        failure_message: String?,
        last_payment_attempt: Time?,
        member: WhopSDK::Payment::Member?,
        membership: WhopSDK::Payment::Membership?,
        paid_at: Time?,
        payment_method_type: WhopSDK::Models::Payment::payment_method_type?,
        plan: WhopSDK::Payment::Plan?,
        product: WhopSDK::Payment::Product?,
        promo_code: WhopSDK::Payment::PromoCode?,
        refundable: bool,
        refunded_amount: Float?,
        refunded_at: Time?,
        retryable: bool,
        status: WhopSDK::Models::receipt_status?,
        substatus: WhopSDK::Models::friendly_receipt_status,
        subtotal: Float?,
        total: Float?,
        usd_total: Float?,
        user: WhopSDK::Payment::User?,
        voidable: bool
      }

    class Payment < WhopSDK::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor amount_after_fees: Float

      attr_accessor auto_refunded: bool

      attr_accessor billing_address: WhopSDK::Payment::BillingAddress?

      attr_accessor billing_reason: WhopSDK::Models::Payment::billing_reason?

      attr_accessor card_brand: WhopSDK::Models::Payment::card_brand?

      attr_accessor card_last4: String?

      attr_accessor company: WhopSDK::Payment::Company?

      attr_accessor created_at: Time

      attr_accessor currency: WhopSDK::Models::currency?

      attr_accessor dispute_alerted_at: Time?

      attr_accessor failure_message: String?

      attr_accessor last_payment_attempt: Time?

      attr_accessor member: WhopSDK::Payment::Member?

      attr_accessor membership: WhopSDK::Payment::Membership?

      attr_accessor paid_at: Time?

      attr_accessor payment_method_type: WhopSDK::Models::Payment::payment_method_type?

      attr_accessor plan: WhopSDK::Payment::Plan?

      attr_accessor product: WhopSDK::Payment::Product?

      attr_accessor promo_code: WhopSDK::Payment::PromoCode?

      attr_accessor refundable: bool

      attr_accessor refunded_amount: Float?

      attr_accessor refunded_at: Time?

      attr_accessor retryable: bool

      attr_accessor status: WhopSDK::Models::receipt_status?

      attr_accessor substatus: WhopSDK::Models::friendly_receipt_status

      attr_accessor subtotal: Float?

      attr_accessor total: Float?

      attr_accessor usd_total: Float?

      attr_accessor user: WhopSDK::Payment::User?

      attr_accessor voidable: bool

      def initialize: (
        id: String,
        amount_after_fees: Float,
        auto_refunded: bool,
        billing_address: WhopSDK::Payment::BillingAddress?,
        billing_reason: WhopSDK::Models::Payment::billing_reason?,
        card_brand: WhopSDK::Models::Payment::card_brand?,
        card_last4: String?,
        company: WhopSDK::Payment::Company?,
        created_at: Time,
        currency: WhopSDK::Models::currency?,
        dispute_alerted_at: Time?,
        failure_message: String?,
        last_payment_attempt: Time?,
        member: WhopSDK::Payment::Member?,
        membership: WhopSDK::Payment::Membership?,
        paid_at: Time?,
        payment_method_type: WhopSDK::Models::Payment::payment_method_type?,
        plan: WhopSDK::Payment::Plan?,
        product: WhopSDK::Payment::Product?,
        promo_code: WhopSDK::Payment::PromoCode?,
        refundable: bool,
        refunded_amount: Float?,
        refunded_at: Time?,
        retryable: bool,
        status: WhopSDK::Models::receipt_status?,
        substatus: WhopSDK::Models::friendly_receipt_status,
        subtotal: Float?,
        total: Float?,
        usd_total: Float?,
        user: WhopSDK::Payment::User?,
        voidable: bool
      ) -> void

      def to_hash: -> {
        id: String,
        amount_after_fees: Float,
        auto_refunded: bool,
        billing_address: WhopSDK::Payment::BillingAddress?,
        billing_reason: WhopSDK::Models::Payment::billing_reason?,
        card_brand: WhopSDK::Models::Payment::card_brand?,
        :card_last4 => String?,
        company: WhopSDK::Payment::Company?,
        created_at: Time,
        currency: WhopSDK::Models::currency?,
        dispute_alerted_at: Time?,
        failure_message: String?,
        last_payment_attempt: Time?,
        member: WhopSDK::Payment::Member?,
        membership: WhopSDK::Payment::Membership?,
        paid_at: Time?,
        payment_method_type: WhopSDK::Models::Payment::payment_method_type?,
        plan: WhopSDK::Payment::Plan?,
        product: WhopSDK::Payment::Product?,
        promo_code: WhopSDK::Payment::PromoCode?,
        refundable: bool,
        refunded_amount: Float?,
        refunded_at: Time?,
        retryable: bool,
        status: WhopSDK::Models::receipt_status?,
        substatus: WhopSDK::Models::friendly_receipt_status,
        subtotal: Float?,
        total: Float?,
        usd_total: Float?,
        user: WhopSDK::Payment::User?,
        voidable: bool
      }

      type billing_address =
        {
          city: String?,
          country: String?,
          :line1 => String?,
          :line2 => String?,
          name: String?,
          postal_code: String?,
          state: String?
        }

      class BillingAddress < WhopSDK::Internal::Type::BaseModel
        attr_accessor city: String?

        attr_accessor country: String?

        attr_accessor line1: String?

        attr_accessor line2: String?

        attr_accessor name: String?

        attr_accessor postal_code: String?

        attr_accessor state: String?

        def initialize: (
          city: String?,
          country: String?,
          line1: String?,
          line2: String?,
          name: String?,
          postal_code: String?,
          state: String?
        ) -> void

        def to_hash: -> {
          city: String?,
          country: String?,
          :line1 => String?,
          :line2 => String?,
          name: String?,
          postal_code: String?,
          state: String?
        }
      end

      type billing_reason =
        :subscription_create
        | :subscription_cycle
        | :subscription_update
        | :one_time
        | :manual
        | :subscription

      module BillingReason
        extend WhopSDK::Internal::Type::Enum

        SUBSCRIPTION_CREATE: :subscription_create
        SUBSCRIPTION_CYCLE: :subscription_cycle
        SUBSCRIPTION_UPDATE: :subscription_update
        ONE_TIME: :one_time
        MANUAL: :manual
        SUBSCRIPTION: :subscription

        def self?.values: -> ::Array[WhopSDK::Models::Payment::billing_reason]
      end

      type card_brand =
        :mastercard
        | :visa
        | :amex
        | :discover
        | :unionpay
        | :jcb
        | :diners
        | :link
        | :troy
        | :visadankort
        | :visabancontact
        | :china_union_pay
        | :rupay
        | :jcbrupay
        | :elo
        | :unknown

      module CardBrand
        extend WhopSDK::Internal::Type::Enum

        MASTERCARD: :mastercard
        VISA: :visa
        AMEX: :amex
        DISCOVER: :discover
        UNIONPAY: :unionpay
        JCB: :jcb
        DINERS: :diners
        LINK: :link
        TROY: :troy
        VISADANKORT: :visadankort
        VISABANCONTACT: :visabancontact
        CHINA_UNION_PAY: :china_union_pay
        RUPAY: :rupay
        JCBRUPAY: :jcbrupay
        ELO: :elo
        UNKNOWN: :unknown

        def self?.values: -> ::Array[WhopSDK::Models::Payment::card_brand]
      end

      type company = { id: String, route: String, title: String }

      class Company < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor route: String

        attr_accessor title: String

        def initialize: (id: String, route: String, title: String) -> void

        def to_hash: -> { id: String, route: String, title: String }
      end

      type member = { id: String, phone: String? }

      class Member < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor phone: String?

        def initialize: (id: String, phone: String?) -> void

        def to_hash: -> { id: String, phone: String? }
      end

      type membership =
        { id: String, status: WhopSDK::Models::membership_status }

      class Membership < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor status: WhopSDK::Models::membership_status

        def initialize: (
          id: String,
          status: WhopSDK::Models::membership_status
        ) -> void

        def to_hash: -> {
          id: String,
          status: WhopSDK::Models::membership_status
        }
      end

      type payment_method_type =
        :acss_debit
        | :affirm
        | :afterpay_clearpay
        | :alipay
        | :alma
        | :amazon_pay
        | :apple_pay
        | :au_becs_debit
        | :bacs_debit
        | :bancontact
        | :billie
        | :blik
        | :boleto
        | :card
        | :cashapp
        | :crypto
        | :eps
        | :fpx
        | :giropay
        | :google_pay
        | :grabpay
        | :ideal
        | :kakao_pay
        | :klarna
        | :konbini
        | :kr_card
        | :link
        | :mobilepay
        | :multibanco
        | :naver_pay
        | :nz_bank_account
        | :oxxo
        | :p24
        | :pay_by_bank
        | :payco
        | :paynow
        | :pix
        | :promptpay
        | :revolut_pay
        | :samsung_pay
        | :satispay
        | :sepa_debit
        | :sofort
        | :swish
        | :twint
        | :us_bank_account
        | :wechat_pay
        | :zip
        | :bizum
        | :capchase_pay
        | :kriya
        | :mondu
        | :ng_wallet
        | :paypay
        | :sequra
        | :scalapay
        | :vipps
        | :custom
        | :customer_balance
        | :gopay
        | :mb_way
        | :ng_bank
        | :ng_bank_transfer
        | :ng_card
        | :ng_market
        | :ng_ussd
        | :paypal
        | :payto
        | :qris
        | :rechnung
        | :south_korea_market
        | :kr_market
        | :shopeepay
        | :upi
        | :sunbit
        | :netbanking
        | :id_bank_transfer
        | :demo_pay
        | :shop_pay

      module PaymentMethodType
        extend WhopSDK::Internal::Type::Enum

        ACSS_DEBIT: :acss_debit
        AFFIRM: :affirm
        AFTERPAY_CLEARPAY: :afterpay_clearpay
        ALIPAY: :alipay
        ALMA: :alma
        AMAZON_PAY: :amazon_pay
        APPLE_PAY: :apple_pay
        AU_BECS_DEBIT: :au_becs_debit
        BACS_DEBIT: :bacs_debit
        BANCONTACT: :bancontact
        BILLIE: :billie
        BLIK: :blik
        BOLETO: :boleto
        CARD: :card
        CASHAPP: :cashapp
        CRYPTO: :crypto
        EPS: :eps
        FPX: :fpx
        GIROPAY: :giropay
        GOOGLE_PAY: :google_pay
        GRABPAY: :grabpay
        IDEAL: :ideal
        KAKAO_PAY: :kakao_pay
        KLARNA: :klarna
        KONBINI: :konbini
        KR_CARD: :kr_card
        LINK: :link
        MOBILEPAY: :mobilepay
        MULTIBANCO: :multibanco
        NAVER_PAY: :naver_pay
        NZ_BANK_ACCOUNT: :nz_bank_account
        OXXO: :oxxo
        P24: :p24
        PAY_BY_BANK: :pay_by_bank
        PAYCO: :payco
        PAYNOW: :paynow
        PIX: :pix
        PROMPTPAY: :promptpay
        REVOLUT_PAY: :revolut_pay
        SAMSUNG_PAY: :samsung_pay
        SATISPAY: :satispay
        SEPA_DEBIT: :sepa_debit
        SOFORT: :sofort
        SWISH: :swish
        TWINT: :twint
        US_BANK_ACCOUNT: :us_bank_account
        WECHAT_PAY: :wechat_pay
        ZIP: :zip
        BIZUM: :bizum
        CAPCHASE_PAY: :capchase_pay
        KRIYA: :kriya
        MONDU: :mondu
        NG_WALLET: :ng_wallet
        PAYPAY: :paypay
        SEQURA: :sequra
        SCALAPAY: :scalapay
        VIPPS: :vipps
        CUSTOM: :custom
        CUSTOMER_BALANCE: :customer_balance
        GOPAY: :gopay
        MB_WAY: :mb_way
        NG_BANK: :ng_bank
        NG_BANK_TRANSFER: :ng_bank_transfer
        NG_CARD: :ng_card
        NG_MARKET: :ng_market
        NG_USSD: :ng_ussd
        PAYPAL: :paypal
        PAYTO: :payto
        QRIS: :qris
        RECHNUNG: :rechnung
        SOUTH_KOREA_MARKET: :south_korea_market
        KR_MARKET: :kr_market
        SHOPEEPAY: :shopeepay
        UPI: :upi
        SUNBIT: :sunbit
        NETBANKING: :netbanking
        ID_BANK_TRANSFER: :id_bank_transfer
        DEMO_PAY: :demo_pay
        SHOP_PAY: :shop_pay

        def self?.values: -> ::Array[WhopSDK::Models::Payment::payment_method_type]
      end

      type plan = { id: String }

      class Plan < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        def initialize: (id: String) -> void

        def to_hash: -> { id: String }
      end

      type product = { id: String, route: String, title: String }

      class Product < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor route: String

        attr_accessor title: String

        def initialize: (id: String, route: String, title: String) -> void

        def to_hash: -> { id: String, route: String, title: String }
      end

      type promo_code =
        {
          id: String,
          amount_off: Float,
          base_currency: WhopSDK::Models::currency,
          code: String?,
          number_of_intervals: Integer?,
          promo_type: WhopSDK::Models::promo_type
        }

      class PromoCode < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor amount_off: Float

        attr_accessor base_currency: WhopSDK::Models::currency

        attr_accessor code: String?

        attr_accessor number_of_intervals: Integer?

        attr_accessor promo_type: WhopSDK::Models::promo_type

        def initialize: (
          id: String,
          amount_off: Float,
          base_currency: WhopSDK::Models::currency,
          code: String?,
          number_of_intervals: Integer?,
          promo_type: WhopSDK::Models::promo_type
        ) -> void

        def to_hash: -> {
          id: String,
          amount_off: Float,
          base_currency: WhopSDK::Models::currency,
          code: String?,
          number_of_intervals: Integer?,
          promo_type: WhopSDK::Models::promo_type
        }
      end

      type user =
        { id: String, email: String?, name: String?, username: String }

      class User < WhopSDK::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor email: String?

        attr_accessor name: String?

        attr_accessor username: String

        def initialize: (
          id: String,
          email: String?,
          name: String?,
          username: String
        ) -> void

        def to_hash: -> {
          id: String,
          email: String?,
          name: String?,
          username: String
        }
      end
    end
  end
end
